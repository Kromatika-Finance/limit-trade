const KromatikaMetaSwap = artifacts.require("KromatikaMetaSwap");
const ERC20 = artifacts.require("ERC20");

module.exports = async(callback) => {

    try {

        const accounts = await web3.eth.getAccounts();
        const currentAccount = accounts[0];

        const metaSwap = await KromatikaMetaSwap.deployed();

        const tokenFrom = "0x14af1f2f02dccb1e43402339099a05a5e363b83c"; //KROM
        const tokenTo = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"; // eth

        const amountFrom = "1000000000000000000";
        let token0Instance = await ERC20.at(tokenFrom);

        if (amountFrom > 0) {
            await token0Instance.approve(
                metaSwap.address,
                amountFrom,
                {from: currentAccount, gas: 100000}
            );

            console.log('Allowance: ' + (await token0Instance.allowance(currentAccount, metaSwap.address)).toString());
        }

        let balanceToken0Before = await token0Instance.balanceOf(currentAccount);
        console.log('balanceToken0Before:', web3.utils.fromWei(balanceToken0Before.toString()));

        let balanceETHBefore = await web3.eth.getBalance(currentAccount)
        console.log('ETH balance before:', web3.utils.fromWei(balanceETHBefore.toString()));

        const aggregatorAddress = "0xdef1c0ded9bec7f1a1670819833240f027b25eff"; // 1inch
        const aggregatorData = "0x415565b000000000000000000000000014af1f2f02dccb1e43402339099a05a5e363b83c000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000131e2f98ecf48f400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014af1f2f02dccb1e43402339099a05a5e363b83c0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000131e2f98ecf48f4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b14af1f2f02dccb1e43402339099a05a5e363b83c000bb80d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000014af1f2f02dccb1e43402339099a05a5e363b83c0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000141e19bb2d628ba1a9";
        // at block 14813128

        const adapterId = 'SwapAggregator';
        const adapterData = web3.eth.abi.encodeParameter(
            'tuple(address,address,uint256,address,bytes)',
            [tokenFrom, tokenTo, amountFrom, aggregatorAddress, aggregatorData]
        );

        const estimatedGas = await metaSwap.swap.estimateGas(tokenFrom, amountFrom,
            [
                adapterId,
                adapterData
            ]
        ,{from: currentAccount});

        const gasLimit = new web3.utils.BN(estimatedGas * 1.10);

        const performedSwap = await metaSwap.swap(tokenFrom, amountFrom,
            [
                adapterId,
                adapterData
            ]
            ,{from: currentAccount, gas: gasLimit});

        console.log('performedSwap:', performedSwap);

        const balanceToken0After = await token0Instance.balanceOf(currentAccount);
        console.log('balanceToken0 after:', web3.utils.fromWei(balanceToken0After.toString()));

        const balanceETHAfter = await web3.eth.getBalance(currentAccount)
        console.log('ETH balance after:', web3.utils.fromWei(balanceETHAfter.toString()));

        console.log("Token diff: " + web3.utils.fromWei((balanceToken0After - balanceToken0Before).toString()));
        console.log("ETH diff: " + web3.utils.fromWei((balanceETHAfter - balanceETHBefore).toString()));

    } catch (error) {
        console.log(error);
    }
    callback();
}